# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.2
#
# <auto-generated>
#
# Generated from file `Dac.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module dac
_M_dac = Ice.openModule('dac')
__name__ = 'dac'

if 'ResultBean' not in _M_dac.__dict__:
    _M_dac.ResultBean = Ice.createTempClass()
    class ResultBean(object):
        def __init__(self, status='', code='', message='', data=''):
            self.status = status
            self.code = code
            self.message = message
            self.data = data

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.status)
            _h = 5 * _h + Ice.getHash(self.code)
            _h = 5 * _h + Ice.getHash(self.message)
            _h = 5 * _h + Ice.getHash(self.data)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_dac.ResultBean):
                return NotImplemented
            else:
                if self.status is None or other.status is None:
                    if self.status != other.status:
                        return (-1 if self.status is None else 1)
                else:
                    if self.status < other.status:
                        return -1
                    elif self.status > other.status:
                        return 1
                if self.code is None or other.code is None:
                    if self.code != other.code:
                        return (-1 if self.code is None else 1)
                else:
                    if self.code < other.code:
                        return -1
                    elif self.code > other.code:
                        return 1
                if self.message is None or other.message is None:
                    if self.message != other.message:
                        return (-1 if self.message is None else 1)
                else:
                    if self.message < other.message:
                        return -1
                    elif self.message > other.message:
                        return 1
                if self.data is None or other.data is None:
                    if self.data != other.data:
                        return (-1 if self.data is None else 1)
                else:
                    if self.data < other.data:
                        return -1
                    elif self.data > other.data:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_dac._t_ResultBean)

        __repr__ = __str__

    _M_dac._t_ResultBean = IcePy.defineStruct('::dac::ResultBean', ResultBean, (), (
        ('status', (), IcePy._t_string),
        ('code', (), IcePy._t_string),
        ('message', (), IcePy._t_string),
        ('data', (), IcePy._t_string)
    ))

    _M_dac.ResultBean = ResultBean
    del ResultBean

if 'DacService' not in _M_dac.__dict__:
    _M_dac.DacService = Ice.createTempClass()
    class DacService(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_dac.DacService:
                raise RuntimeError('dac.DacService is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::dac::DacService')

        def ice_id(self, current=None):
            return '::dac::DacService'

        def ice_staticId():
            return '::dac::DacService'
        ice_staticId = staticmethod(ice_staticId)

        def getData(self, jsonString, appKey, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_dac._t_DacService)

        __repr__ = __str__

    _M_dac.DacServicePrx = Ice.createTempClass()
    class DacServicePrx(Ice.ObjectPrx):

        def getData(self, jsonString, appKey, _ctx=None):
            return _M_dac.DacService._op_getData.invoke(self, ((jsonString, appKey), _ctx))

        def begin_getData(self, jsonString, appKey, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_dac.DacService._op_getData.begin(self, ((jsonString, appKey), _response, _ex, _sent, _ctx))

        def end_getData(self, _r):
            return _M_dac.DacService._op_getData.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_dac.DacServicePrx.ice_checkedCast(proxy, '::dac::DacService', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_dac.DacServicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::dac::DacService'
        ice_staticId = staticmethod(ice_staticId)

    _M_dac._t_DacServicePrx = IcePy.defineProxy('::dac::DacService', DacServicePrx)

    _M_dac._t_DacService = IcePy.defineClass('::dac::DacService', DacService, -1, (), True, False, None, (), ())
    DacService._ice_type = _M_dac._t_DacService

    DacService._op_getData = IcePy.Operation('getData', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_dac._t_ResultBean, False, 0), ())

    _M_dac.DacService = DacService
    del DacService

    _M_dac.DacServicePrx = DacServicePrx
    del DacServicePrx

# End of module dac
