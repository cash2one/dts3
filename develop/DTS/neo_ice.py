# **********************************************************************
#
# Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
#
# This copy of Ice is licensed to you under the terms described in the
# ICE_LICENSE file included in this distribution.
#
# **********************************************************************
#
# Ice version 3.6.2
#
# <auto-generated>
#
# Generated from file `neo.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

import Ice, IcePy

# Start of module neo
_M_neo = Ice.openModule('neo')
__name__ = 'neo'

if 'ResultBean' not in _M_neo.__dict__:
    _M_neo.ResultBean = Ice.createTempClass()
    class ResultBean(object):
        def __init__(self, status='', code='', message='', data=''):
            self.status = status
            self.code = code
            self.message = message
            self.data = data

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.status)
            _h = 5 * _h + Ice.getHash(self.code)
            _h = 5 * _h + Ice.getHash(self.message)
            _h = 5 * _h + Ice.getHash(self.data)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_neo.ResultBean):
                return NotImplemented
            else:
                if self.status is None or other.status is None:
                    if self.status != other.status:
                        return (-1 if self.status is None else 1)
                else:
                    if self.status < other.status:
                        return -1
                    elif self.status > other.status:
                        return 1
                if self.code is None or other.code is None:
                    if self.code != other.code:
                        return (-1 if self.code is None else 1)
                else:
                    if self.code < other.code:
                        return -1
                    elif self.code > other.code:
                        return 1
                if self.message is None or other.message is None:
                    if self.message != other.message:
                        return (-1 if self.message is None else 1)
                else:
                    if self.message < other.message:
                        return -1
                    elif self.message > other.message:
                        return 1
                if self.data is None or other.data is None:
                    if self.data != other.data:
                        return (-1 if self.data is None else 1)
                else:
                    if self.data < other.data:
                        return -1
                    elif self.data > other.data:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_neo._t_ResultBean)

        __repr__ = __str__

    _M_neo._t_ResultBean = IcePy.defineStruct('::neo::ResultBean', ResultBean, (), (
        ('status', (), IcePy._t_string),
        ('code', (), IcePy._t_string),
        ('message', (), IcePy._t_string),
        ('data', (), IcePy._t_string)
    ))

    _M_neo.ResultBean = ResultBean
    del ResultBean

if 'NeoService' not in _M_neo.__dict__:
    _M_neo.NeoService = Ice.createTempClass()
    class NeoService(Ice.Object):
        def __init__(self):
            if Ice.getType(self) == _M_neo.NeoService:
                raise RuntimeError('neo.NeoService is an abstract class')

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::neo::NeoService')

        def ice_id(self, current=None):
            return '::neo::NeoService'

        def ice_staticId():
            return '::neo::NeoService'
        ice_staticId = staticmethod(ice_staticId)

        def searchRelationship(self, jsonString, appKey, current=None):
            pass

        def searchNodes(self, jsonString, appKey, current=None):
            pass

        def __str__(self):
            return IcePy.stringify(self, _M_neo._t_NeoService)

        __repr__ = __str__

    _M_neo.NeoServicePrx = Ice.createTempClass()
    class NeoServicePrx(Ice.ObjectPrx):

        def searchRelationship(self, jsonString, appKey, _ctx=None):
            return _M_neo.NeoService._op_searchRelationship.invoke(self, ((jsonString, appKey), _ctx))

        def begin_searchRelationship(self, jsonString, appKey, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_neo.NeoService._op_searchRelationship.begin(self, ((jsonString, appKey), _response, _ex, _sent, _ctx))

        def end_searchRelationship(self, _r):
            return _M_neo.NeoService._op_searchRelationship.end(self, _r)

        def searchNodes(self, jsonString, appKey, _ctx=None):
            return _M_neo.NeoService._op_searchNodes.invoke(self, ((jsonString, appKey), _ctx))

        def begin_searchNodes(self, jsonString, appKey, _response=None, _ex=None, _sent=None, _ctx=None):
            return _M_neo.NeoService._op_searchNodes.begin(self, ((jsonString, appKey), _response, _ex, _sent, _ctx))

        def end_searchNodes(self, _r):
            return _M_neo.NeoService._op_searchNodes.end(self, _r)

        def checkedCast(proxy, facetOrCtx=None, _ctx=None):
            return _M_neo.NeoServicePrx.ice_checkedCast(proxy, '::neo::NeoService', facetOrCtx, _ctx)
        checkedCast = staticmethod(checkedCast)

        def uncheckedCast(proxy, facet=None):
            return _M_neo.NeoServicePrx.ice_uncheckedCast(proxy, facet)
        uncheckedCast = staticmethod(uncheckedCast)

        def ice_staticId():
            return '::neo::NeoService'
        ice_staticId = staticmethod(ice_staticId)

    _M_neo._t_NeoServicePrx = IcePy.defineProxy('::neo::NeoService', NeoServicePrx)

    _M_neo._t_NeoService = IcePy.defineClass('::neo::NeoService', NeoService, -1, (), True, False, None, (), ())
    NeoService._ice_type = _M_neo._t_NeoService

    NeoService._op_searchRelationship = IcePy.Operation('searchRelationship', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_neo._t_ResultBean, False, 0), ())
    NeoService._op_searchNodes = IcePy.Operation('searchNodes', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_string, False, 0), ((), IcePy._t_string, False, 0)), (), ((), _M_neo._t_ResultBean, False, 0), ())

    _M_neo.NeoService = NeoService
    del NeoService

    _M_neo.NeoServicePrx = NeoServicePrx
    del NeoServicePrx

# End of module neo
